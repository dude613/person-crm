generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Organization {
  id           String   @id @default(uuid())
  name         String
  city         String?
  notes        String?
  createdAt    DateTime @default(now())
  lastModified DateTime @updatedAt

  schools          School[]
  incidents        Incident[] @relation("involved_organizations")
  createdBy        User?      @relation("org_created_by", fields: [createdById], references: [id])
  createdById      String?
  lastModifiedById String?
  lastModifiedBy   User?      @relation("org_last_modified_by", fields: [lastModifiedById], references: [id])
  heads            Person[]   @relation("OrganizationHeads")
}

model Incident {
  id           String      @id @default(uuid())
  title        String
  type         String
  targeted     String
  date         DateTime
  time         String
  source       UserSource?
  location     String
  notes        String?
  createdAt    DateTime    @default(now())
  lastModified DateTime    @updatedAt

  persons          Person[]       @relation("involved_persons")
  schools          School[]       @relation("involved_schools")
  organizations    Organization[] @relation("involved_organizations")
  createdBy        User?          @relation("created_by", fields: [createdById], references: [id])
  lastModifiedBy   User?          @relation("last_modified_by", fields: [lastModifiedById], references: [id])
  createdById      String?
  lastModifiedById String?
}

model Person {
  id           String      @id @default(uuid())
  username     String      @unique
  TFF_ID       String?
  fname        String?
  mname        String?
  password     String?
  lname        String?
  fullName     String?
  address      String?
  address2     String?
  city         String?
  state        String?
  country      String?
  DOB          DateTime?
  role         String?
  source       UserSource?
  title        String?
  type         UserType    @default(USER)
  mainPhoto    String?
  notes        String?
  createdAt    DateTime    @default(now())
  lastModified DateTime    @updatedAt

  schools          School[]       @relation("SchoolHeads")
  organizations    Organization[] @relation("OrganizationHeads")
  incidents        Incident[]     @relation("involved_persons")
  createdBy        User?          @relation("created_by", fields: [createdById], references: [id])
  lastModifiedBy   User?          @relation("last_modified_by", fields: [lastModifiedById], references: [id])
  createdById      String?
  lastModifiedById String?

  social Social[]
}

model User {
  id           String    @id @default(uuid())
  username     String    @unique
  fname        String?
  mname        String?
  password     String?
  lname        String?
  fullName     String?
  address      String?
  city         String?
  state        String?
  country      String?
  DOB          DateTime?
  title        String?
  role         UserType  @default(USER)
  createdAt    DateTime  @default(now())
  lastModified DateTime  @updatedAt

  createdOrganizations  Organization[] @relation("org_created_by")
  modifiedOrganizations Organization[] @relation("org_last_modified_by")
  createdschools        School[]       @relation("schl_created_by")
  modifiedSchools       School[]       @relation("schl_last_modified_by")
  createdPersons        Person[]       @relation("created_by")
  modifiedPersons       Person[]       @relation("last_modified_by")
  createdIncidents      Incident[]     @relation("created_by")
  modifiedIncidents     Incident[]     @relation("last_modified_by")
}

model School {
  id           String        @id @default(uuid())
  name         String
  city         String
  state        String
  organization Organization? @relation(fields: [organizationId], references: [id])
  notes        String?
  createdAt    DateTime      @default(now())
  lastModified DateTime      @updatedAt
  icon         Icon?         @relation(fields: [iconId], references: [id])
  iconId       String?

  heads     Person[]   @relation("SchoolHeads")
  incidents Incident[] @relation("involved_schools")

  organizationId   String?
  createdBy        User?   @relation("schl_created_by", fields: [createdById], references: [id])
  lastModifiedBy   User?   @relation("schl_last_modified_by", fields: [lastModifiedById], references: [id])
  createdById      String?
  lastModifiedById String?
}

model Icon {
  id       String   @id @default(uuid())
  name     String
  iconLink String
  notes    String?
  schools  School[]
}

model Social {
  id       String         @id @default(uuid())
  platform SocialPlatform
  account  String
  person   Person?        @relation(fields: [personId], references: [id])
  personId String?
}

enum SocialPlatform {
  LINKEDIN
  FB
  TWITTER
  IG
}

enum UserType {
  ADMIN
  REPORTER
  USER
}

enum UserSource {
  SOCIAL_MEDIA
  PERSON
}
